== Forms ==
This Forms library has the goal to easily create HTML forms. Configuration is done with an associative array, the returned data will have the same structure (same keys, but with data).

There are three modes to use this library:
* PHP Only: Maybe users disable Javascript. Forms should still work. Also we should never trust the Javascript implementation to get checks (e.g. for correct data) right or rather people might try nasty stuff.
* PHP/Javascript combined: The forms are defined and created in PHP, Javascript is responsible for interactivity, like checking validity of data, adding/removing elements and highlighting changed values.
* Javascript only: If you are writing an Ajax application you might want to create Forms directly from Javascript, e.g. because you do no longer reload webpages.

== Example code ==
=== PHP ===
{{{
$f=new form('data', array(
  'name'=>array(
    'type'=>'text',
    'name'=>'Name',
  ),
  'sex'=>array(
    'type'=>'radio',
    'name'=>'Sex',
    'values'=>array('m'=>'male', 'f'=>'female', 'x'=>'other'),
  ),
));

$f->set_data({ name: 'Alice', sex: 'f' });

print $f->show();
}}}

=== JavaScript ===
{{{
f=new form('data', {
  name: {
    type: 'text',
    name: 'Name',
  },
  sex: {
    type: 'radio',
    name: 'Sex',
    values: { m: 'male', f: 'female', x: 'other' },
  }
});

f.show(document.getElementById("put_the_form_there"));

f.set_data({ name: 'Bob', sex: 'm' });
}}}

== Elements ==
=== All Form Elements ===
All form elements share some options.

Definition:
* type: defines type of form element (e.g. 'text')
* name: Name of the element (e.g. "Birthday"). This key may be translated (see below)
* desc: Description (usually written below Name in smaller letters); accepts full HTML (in contrast to 'name'). This key may be translated (see below)
* count: We internally be converted to a form element of type array using the options of this key. E.g. array('default'=>2) resp. { 'default': 2 }. See 'Form Element Array' for more information.
* default: Specify a default value, which is shown if no value is set.
* req: A value is required.
* check: Evaluate validity of input. Defined as array("type", parameters). Will call function "check_type" inside form element, will be passed parameters. Example: "regexp" for Form Element Text (will call function "check_regexp").
** 'and': combine several checks, e.g. array("and", array("regexp", ...), array("foo", ...)) - all sub-checks need to resolve positive.
** 'or': combine several checks, e.g. array("and", array("regexp", ...), array("foo", ...)) - at least one sub-check need to resolve positive.
** 'not': inverse check, e.g. array("not", array("regexp", ...)) - the sub-check need to resolve negative.
** 'check': Call check on a sibling form element.
** 'is': Compare to a specific value, array("is", VALUE, [MESSAGE]), e.g. array("is", 5, "Value '5' required")

Translation of name, desc, ...:
To translate the options you may supply an array with the language codes as keys, e.g. array("en"=>"English text", "de"=>"German text"); if translation is missing, the first translation will be used.

=== Form Element "Form" ===
A form inside the form. E.g. if you have several cats, and want to record the same properties for every cat, like Name, Age and Race.

Definition (see 'All Form Elements' for inherited options):
* type: 'form'
* def: Definition of the sub form.

Value:
* A hash of the sub form.

=== Form Element "Array" ===
A variable count of the child elements. This can also be accomplished by setting a 'count' to any form element. Single values may be removed or added interactively.

Definition:
* type: 'array'
* def: Definition of the sub element.
* default: default count of values

Value:
* Array of sub elements.

=== Form Element "Text" ===
Basic form element with a single line text input.

Definition:
* type: 'text'
* check: array("regexp", REGEXP, [MESSAGE]), e.g. array("regexp", "^A", "Value needs to start with an 'A'")
* empty_value: Value to be returned if text field is empty (default: null)
* html_attributes: Assoc. Array, e.g. array("style"=>"text-weight: bold;", "autofocus=>true)
* values: array of recommended values
* force_values: boolean; if true, value must be member of 'values' array (default: false).

Value:
* String. Will be stripped of additional slashes.

Compatibility Issues:
* Non-CSS browsers will show the "values" list in the page content.

TODO:
* If an element with "values" is used in an array, the datalist will be included for every member. A workaround is to generate the datalist manually and include "html_attributes" instead with <tt>list=id of datalist</tt>.

=== Form Element "Textarea" ===
Similar to Form Element "Text", but provides a multi line text input.

Definition (also see Form Element "Text", except 'values'):
* type: 'textarea'

Value:
* String. Will be stripped of additional slashes.

=== Form Element "Numeric" ===
In contrast to other elements you define this element as 'integer' or 'float', to specify the numeric type. The element is based on the Form Element "Text", therefore you can use all options specified there.

Definition (also see Form Element "Text"):
* type: 'integer' or 'float'

Value:
* Returns a value in the specified numeric type or the 'empty value' (default null).

=== Form Element "date", "datetime", "datetime-local" ===
The element is based on the Form Element "Text", therefore you can use all options specified there.

Definition (also see Form Element "Text"):
* type: 'date', 'datetime', 'datetime-local'
* format: How date is displayed resp. entered in input field. Default: "j.n.Y G:i:s" (see PHP function 'Date' for details). Supported keys: Y, y, m, n, d, j, g, G, h, H, h, i, s, O, P, a, A.
* value_format: How date is represented in set_data()/get_data(). See below under 'Value'.
* check: Additional check type 'after', can be a date value or a reference to another date element on the same hierarchy level (e.g. 'check'=>array("after", "[start]", "Date has to be after 'start' element") )

Value:
* Returns a value in the specified type (see RFC 3339 for details). The format can be overwritten by the option 'value_format':
** 'date': e.g. '2013-12-24'
** 'datetime': e.g. '2013-12-24T19:00:00Z' or '2013-12-24T19:00:00.123+02:00'
** 'datetime-local': e.g. '2013-12-24T19:00:00'

TODO: The format in JavaScript is much more flexible than the PHP format (esp. concerning string representations of weekday/month). So, currently it's not advisable to use string representations.

=== Unsupported Form Elements ===
Any form elements that are not supported (yet) will show the name and a warning, that the form element type is not supported. Any data set to the element will be kept, as internally a JSON form element will be used.

Definition:
* type: any which is not listed on this page

Value:
* Any, see JSON.

=== Form Element "Checkbox" ===
A list of checkboxes where a random count of boxes may be checked.

Definition:
* type: 'checkbox'
* values: hash array of values, e.g. array("php"=>"PHP", "cpp"=>"C++", "js"=>"Javascript") or simple array of values, e.g. array("PHP", "C++", "Javascript"); may be translated like: array('m'=>array("en"=>"male", "de"=>"männlich"), 'f'=>array("en"=>"female", "de"=>"weiblich"))
* values_mode: 'keys' (default when a hash array is used) or 'values' (default when a simple array is used)

Value:
* In 'keys' values_mode an array of the keys of the chosen values is returned (e.g. array("php", "cpp"); in 'values' mode an array of the the keys of the chosen values is returned (e.g. array("PHP", "C++"))

=== Form Element "Radio" ===
A list of radio boxes where a maximum of one of boxes may be checked.

Definition:
* type: 'radio'
* values: hash array of values, e.g. array("m"=>"male", "f"=>"female") or simple array of values, e.g. array("male", "female"); may be translated like: array('m'=>array("en"=>"male", "de"=>"männlich"), 'f'=>array("en"=>"female", "de"=>"weiblich"))
* values_mode: 'keys' (default when a hash array is used) or 'values' (default when a simple array is used)

Value:
* In 'keys' values_mode the key of the chosen value is returned (e.g. "m"); in 'values' mode the value is returned (e.g. "male")

=== Form Element "Boolean" ===
A single checkbox without label.

Definition:
* type: 'boolean'

Value:
* true/false

=== Form Element "Select" ===
A dropdown box were an entry can be selected.

Definition:
* type: 'select'
* values: hash array of values, e.g. array("m"=>"male", "f"=>"female") or simple array of values array("male", "female"); may be translated like: array('m'=>array("en"=>"male", "de"=>"männlich"), 'f'=>array("en"=>"female", "de"=>"weiblich"))
* values_mode: 'keys' (default when a hash array is used) or 'values' (default when a simple array is used)
* empty_value: Value to be returned if key is empty (default: null)

Value:
* In 'keys' values_mode the key of the chosen value is returned (e.g. "m"); in 'values' mode the value is returned (e.g. "male")

=== Form Element "Password" ===
Like Form Element "Text", but hides the password.

Definition:
* type: 'password'

Value:
* String

=== Form Element "JSON" ===
An input for arbitrary JSON data. Will be returned as decoded value, as supported by the language.

Definition:
* type: 'json'

Value:
* A mixed value which is supported by JSON.

=== Form Element "Color" ===
An input of type 'color'. You may want to load the Spectrum Colorpicker: http://bgrins.github.com/spectrum/ 

Definition:
* type: 'color'

Value:
* Depends on your system, but usually a 6-character hex code prefixed with '#'.

=== Form Element "Keywords" ===
Provide an interface to add/remove random keywords.

Definition:
* type: 'keywords'
* values: List of common keywords from which the user can select while typing (HTML5 only; using a "datalist")
* link: Link each keyword to the specified URL, where % will be replaced by the current value, e.g. "search.php?keyword=%"
* text_remove: Text to display on the remove-buttons (default: "X")
* text_add: Text to display on the add-button (default: "neu")
* text_edit: Text to display on the edit-button (default: "editieren")
* text_edit_save: Text to display on the Save-button in edit mode (default: "Ok")
* text_edit_cancel: Text to display on the Cancel-button in edit mode (default: "Abbrechen")

Value:
* Array of strings, e.g. array("foo", "bar") resp. ["foo", "bar"]

=== Form Element "File" ===
Upload single files. Files are moved to the specified directory (see option 'path'), as value an array will be returned.

Definition:
* type: 'file'
* path: Path where the files get saved to
* template: A name template how files may be called, the following patterns may be used (Example: "submission-[timestamp].[ext]", Default: "[orig_name]"):
** [orig_name]: original file name
** [ext]: the extension
** [timestamp]: Date in form YYYY-MM-DD-HH-MM-SS
* web_path: If file should be downloadable, set a web_path. "[file_name]" will be replaced by the name of the file (e.g. download.php?file=[file_name]").

Value:
{{{
array(
  'name'=>name of file as saved in path,
  'type'=>mime type,
  'size'=>size in byte,
  'orig_name'=>name of file as it was when uploaded,
  'error'=>Error code of file upload
)
}}}

STATE: It's not possible yet to read file content in JavaScript mode

* See http://www.php.net/manual/en/features.file-upload.errors.php for possible error codes. Additional error codes:
** Error 16: Can't move file from PHP temporary folder to temporary file in final folder
** Error 17: Temporary file size differs from PHP upload data
** Error 20: Can't rename temporary file to final file
** Error 21: Final file size differs from PHP upload data

=== Form Element "Directory" ===
Upload multiple files. Files are moved to a newly created directory in the specified path, as value an array will be returned.

Definition:
* type: 'directory'
* path: Path where the directory for the files will be created and the files get saved to
* template: A name template how the directory will be called, the following patterns may be used (Example: "submission-[timestamp]", Default: "[timestamp]"):
** [timestamp]: Date in form YYYY-MM-DD-HH-MM-SS

Value:
{{{
array(
  'name'=>name of the directory,
  'list'=>array(   // list of all the files
    0=>array(
      'name'=>name of file,
      'type'=>mime type,
      'size'=>size in byte,
    )
    1=>...
  )
)
}}}

STATE: Currently disabled

== Functions of form ==
=== Constructor ===
Creates a form.

Synopsis:
* PHP/JS: new form(id, def, options)

Parameters:
* id: a string which will be used to identify elements of this form. By default, the name of HTML input elements will be prefixed with this value.
* def: a hash defining the form, see the Example code above and the Elements definition.
* options: influence workings of the form, possible options:
** var_name: override default html input element prefix

=== set_data(data) ===
PHP/JS: Change data to supplied values. If data doesn't contain a key existing in the form, these values are not changed.

Example:
* PHP: f->set_data(array('sex'=>'f'))
* JS: f.set_data({'sex': 'f'})

Changes the form element 'sex' to 'f', but leaves (in the above example) 'name' untouched.

=== get_data() ===
PHP/JS: Returns data of all elements.

Example:
* PHP: f->get_data()
* JS: f.get_data()

Returns array('name'=>"Alice", 'sex'=>"f") resp. { 'name': "Alice", 'sex': "f" }
